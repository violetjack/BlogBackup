{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape-plus/source/css/bdshare.styl","path":"css/bdshare.styl","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape-plus/.gitattributes","hash":"082442a106c29adb09669f321f984c1bf606f780","modified":1517902347408},{"_id":"themes/landscape-plus/.gitignore","hash":"b64fca798c2e9164bd1c9d8d641c4b2b22334da5","modified":1517902347408},{"_id":"themes/landscape-plus/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1517902347408},{"_id":"themes/landscape-plus/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1517902347408},{"_id":"themes/landscape-plus/README.md","hash":"3b370d9fc7e2c86d3e3e79d1b0eeeb2af461815f","modified":1517902347409},{"_id":"themes/landscape-plus/_config.yml","hash":"a4c192ff2224cf1cd20521bc53fb8b6aab5f2754","modified":1517905600707},{"_id":"themes/landscape-plus/package.json","hash":"5deaa023c44f9f59f3df6e2a033a5fc2586797e6","modified":1517902347416},{"_id":"source/_posts/Vue.js学习系列八 —— Vue源码学习之State学习.md","hash":"672f07551894d9459ab17bd853d699bdd6d07e6b","modified":1517899727039},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1517895939152},{"_id":"source/about/index.md","hash":"3181b0496ee86accf5bd03063ec3290e184b4a09","modified":1517905357136},{"_id":"themes/landscape-plus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517902347401},{"_id":"themes/landscape-plus/.git/config","hash":"6be24f9f89fe0669da53b67e023130d908148e59","modified":1517902347403},{"_id":"themes/landscape-plus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517902340329},{"_id":"themes/landscape-plus/.git/index","hash":"c90730e3639699b810d07d7e00f756a5f9da67b8","modified":1517902351807},{"_id":"themes/landscape-plus/.git/packed-refs","hash":"37915f5293cf10ee9f30f3bbcb6ce91a47acb19b","modified":1517902347399},{"_id":"themes/landscape-plus/languages/default.yml","hash":"0270b76db4c94f8905d4c0dc2303da5d5e756a19","modified":1517902347409},{"_id":"themes/landscape-plus/languages/zh-CN.yml","hash":"e043d662bc48ea28b6072de76e032ed049457acc","modified":1517903141839},{"_id":"themes/landscape-plus/languages/zh-TW.yml","hash":"1187826de31c687542e882835fc8062c2bc7a551","modified":1517902347409},{"_id":"themes/landscape-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1517902347414},{"_id":"themes/landscape-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1517902347414},{"_id":"themes/landscape-plus/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1517902347415},{"_id":"themes/landscape-plus/layout/layout.ejs","hash":"3626a74826657529bea744fb014dd9607e9834d0","modified":1517902347415},{"_id":"themes/landscape-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1517902347415},{"_id":"themes/landscape-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1517902347415},{"_id":"themes/landscape-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1517902347415},{"_id":"themes/landscape-plus/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1517902347416},{"_id":"themes/landscape-plus/source/css/bdshare.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517902347421},{"_id":"themes/landscape-plus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517902340330},{"_id":"themes/landscape-plus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517902340330},{"_id":"themes/landscape-plus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517902340331},{"_id":"themes/landscape-plus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517902340331},{"_id":"themes/landscape-plus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517902340330},{"_id":"themes/landscape-plus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517902340331},{"_id":"themes/landscape-plus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1517902340330},{"_id":"themes/landscape-plus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517902340331},{"_id":"themes/landscape-plus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517902340331},{"_id":"themes/landscape-plus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517902340332},{"_id":"themes/landscape-plus/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1517902340329},{"_id":"themes/landscape-plus/.git/logs/HEAD","hash":"03a2ea9f7891c77051aa10a34911347fc705c110","modified":1517902347402},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","hash":"999505b46330ff068bbae49aea4700e0bca57e88","modified":1517902347410},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1517902347410},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","hash":"ff1e925ab5f512a89a7adb2c337f4bd021982154","modified":1517902347410},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","hash":"2116236daed16cb9f97855ee93b4bc580249d7d2","modified":1517902347410},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","hash":"46d36b67fdb672c3d308c0ba3574811cbba5bbc6","modified":1517902347410},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","hash":"78823298e9e47d8e6556fc2bb4598fc2814f2d52","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","hash":"b37dfc4cae60ff4900aa53b3cf2e07bba12441de","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","hash":"e9bd1af5969f641611251076b13d07002065b2aa","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","hash":"204ed307e7b7cedb6d598b9ee14769b8d41180ca","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1517902347412},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","hash":"aa3a3eadf31d9b3e4d3081cd3ca61860e55ef553","modified":1517902347413},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","hash":"bbb86beab343e08e689a372ddb60bfa782e93bc4","modified":1517902347413},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","hash":"ae96217d072f637925c907f5f467450083863f50","modified":1517902347413},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","hash":"ff4eb9afa0b9e5b31c55c6775880452222c57f53","modified":1517902347413},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1517902347414},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","hash":"b461390feb5ef82df7aef9677a31d5137c352f61","modified":1517902347414},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1517902347414},{"_id":"themes/landscape-plus/source/css/_extend.styl","hash":"3f8a9e4e63b7249408ac54559a5f9633d703e132","modified":1517902347417},{"_id":"themes/landscape-plus/source/css/_variables.styl","hash":"5e4e6940979c312b58d2edb88383dd7935c577f7","modified":1517902347421},{"_id":"themes/landscape-plus/source/css/style.styl","hash":"30fdb982f5324d0023f38c28e83238b9518f2756","modified":1517902347428},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517902347428},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517902347429},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517902347429},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517902347429},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517902347429},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517902347430},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1517902347431},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1517902347432},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1517902347432},{"_id":"themes/landscape-plus/source/img/favicon.png","hash":"7192dfc87e31d5ff5490f0be38a0a3c85584f6ac","modified":1517902807036},{"_id":"themes/landscape-plus/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1517902347433},{"_id":"themes/landscape-plus/source/js/script.js","hash":"89f3a9ba53e1481a0609cbb62e9530ca339b052d","modified":1517902347433},{"_id":"themes/landscape-plus/.git/objects/pack/pack-cfa8a84922e878689c194cbde35fba05ca4cd157.idx","hash":"f879aaabed5646530834feef78d9aa3b56c061b6","modified":1517902347390},{"_id":"themes/landscape-plus/.git/refs/heads/master","hash":"1577bf49971ab7aa396a37216dd4e701e4e2e78d","modified":1517902347402},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1517902347411},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1517902347412},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1517902347412},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1517902347412},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1517902347412},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1517902347412},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","hash":"19b5af4e0969d93fb757577bd6ff380ef2224eb9","modified":1517902347417},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","hash":"1bd06c119e4b64b85dbc37ba22f5210edf10e0b4","modified":1517902347418},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1517902347418},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1517902347418},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","hash":"888a579a733d852201c9dc5d56e4fee98dd5795d","modified":1517903844730},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","hash":"a3c2f696d9477223bd45b49e5f996d7998ae52e5","modified":1517902347419},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1517902347419},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","hash":"c9ea5b3956b73418dc8b1572e32eb65dc68ca0e5","modified":1517902347419},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1517902347420},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","hash":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1517902347420},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","hash":"817f36dd591d6beef9d41011ae8490d31d5e2e50","modified":1517902347420},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1517902347420},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1517902347421},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1517902347423},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1517902347426},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517902347430},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517902347430},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1517902347430},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1517902347431},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517902347431},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1517902347431},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1517902347422},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1517902347426},{"_id":"themes/landscape-plus/.git/logs/refs/heads/master","hash":"03a2ea9f7891c77051aa10a34911347fc705c110","modified":1517902347402},{"_id":"themes/landscape-plus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517902347401},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1517902347428},{"_id":"themes/landscape-plus/.git/logs/refs/remotes/origin/HEAD","hash":"03a2ea9f7891c77051aa10a34911347fc705c110","modified":1517902347401},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1517902347424},{"_id":"themes/landscape-plus/.git/objects/pack/pack-cfa8a84922e878689c194cbde35fba05ca4cd157.pack","hash":"9da99b110659ec31ad040df2d9cfd6b44eda02e1","modified":1517902347389},{"_id":"public/atom.xml","hash":"b649dcaaf6818815479b801477dd25834bc6b016","modified":1517905452931},{"_id":"public/about/index.html","hash":"4fa4efe859d63de066ed555b711bf0477f745769","modified":1517905607178},{"_id":"public/2018/02/06/hello-world/index.html","hash":"6fde5518ae334c0fddd370d4c22fba3093f5daef","modified":1517905607178},{"_id":"public/archives/index.html","hash":"a606c0c5395504e48fd9402e54bcce0c4573e7f2","modified":1517905607179},{"_id":"public/archives/2018/index.html","hash":"743304f4810de0fbfd1c196db805f33e5988a25b","modified":1517905607179},{"_id":"public/archives/2018/02/index.html","hash":"3a845c0833782ce48524bf8e82103742758737c4","modified":1517905607179},{"_id":"public/2018/02/06/Vue.js学习系列八 —— Vue源码学习之State学习/index.html","hash":"851d58329849eea8d60a5f99f28572dd8633d007","modified":1517905607179},{"_id":"public/index.html","hash":"168a7d9d48dd1edb8a51a78d8889fb8f1b5dbb7d","modified":1517905607179},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517905453025},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517905453025},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517905453025},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517905453025},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517905453025},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517905453025},{"_id":"public/img/favicon.png","hash":"7192dfc87e31d5ff5490f0be38a0a3c85584f6ac","modified":1517905453025},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1517905453025},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1517905453025},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1517905453025},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517905453025},{"_id":"public/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1517905453510},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1517905453513},{"_id":"public/css/bdshare.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517905453554},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1517905453554},{"_id":"public/js/script.js","hash":"89f3a9ba53e1481a0609cbb62e9530ca339b052d","modified":1517905453556},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517905453556},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1517905453556},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1517905453556},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517905453556},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1517905453556},{"_id":"public/css/style.css","hash":"c8df1c43438027b99009c1f70f50abc020da8f5f","modified":1517905453556},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1517905453556},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1517905453556},{"_id":"public/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1517905453558},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1517905453561}],"Category":[],"Data":[],"Page":[{"title":"关于我","date":"2018-02-06T08:20:52.000Z","_content":"\nVioletJack， 专注于Vue前端开发和学习的工匠码农。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-02-06 16:20:52\n---\n\nVioletJack， 专注于Vue前端开发和学习的工匠码农。","updated":"2018-02-06T08:22:37.136Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjdbdpr3t0001orbtqjzzptx5","content":"<p>VioletJack， 专注于Vue前端开发和学习的工匠码农。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>VioletJack， 专注于Vue前端开发和学习的工匠码农。</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-06T05:45:39.152Z","updated":"2018-02-06T05:45:39.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdbdpr3o0000orbt1ju9b8tx","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Vue.js学习系列八 —— Vue源码学习之State学习","_content":"\n> 关于Vue源码学习的博客， [HcySunYang](http://hcysun.me/)的[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。\n注意：本文所用Vue版本为 `2.5.13`\n\n# 关于源码学习\n关于学习源码，我有话要说~\n一开始我学习Vue的源码，是将 [Vue.js](https://github.com/vuejs/vue/blob/dev/dist/vue.js) 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。\n其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。\n所以呢，我看源码的经验教训有如下几点：\n* 看代码，必须带着问题去找实现代码。\n* 保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。\n* 找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。\n* 想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~\n* 学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~\n\n# 如何开始\n这里我们来解决从哪里开始看代码的流程，重点是**找到Vue构造函数的实现**。\n首先，找到 `package.json` 文件，从中找到编译命令 `\"dev\": \"rollup -w -c scripts/config.js --environment TARGET:web-full-dev\"`，这里 `rollup` 是类似于 Webpack 的打包工具，打包文件在 `script/config.js` 中，找到该文件。找 `entry` 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 `dist/vue.js` 的配置项：\n```\n  // Runtime+compiler development build (Browser)\n  'web-full-dev': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.js'),\n    format: 'umd',\n    env: 'development',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n```\n好，这里就找到了 `web/entry-runtime-with-compiler.js` 这个路径，完整路径应该是 `src/platform/web/entry-runtime-with-compiler.js`。在这个文件中我们找到一个Vue对象import进来了。\n```\nimport Vue from './runtime/index'\n```\n我们顺着找到到 `src/platform/web/runtime/index.js` 这个文件，在文件中发现导入文件 \n```\nimport Vue from 'core/index'\n```\n就顺着这个思路找，最终找到 `src/core/instance/index.js` 这个文件。\n完整找到Vue实例入口文件的流程如下：\n```\npackage.json\nscript/config.js\nsrc/platform/web/entry-runtime-with-compiler.js\nsrc/platform/web/runtime/index.js\nsrc/core/index.js\nsrc/core/instance/index.js\n```\n简单看看Vue构造函数的样子~\n```\nimport { initMixin } from './init'\nimport { stateMixin } from './state'\nimport { renderMixin } from './render'\nimport { eventsMixin } from './events'\nimport { lifecycleMixin } from './lifecycle'\nimport { warn } from '../util/index'\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n\ninitMixin(Vue) // 初始化\nstateMixin(Vue) // 状态混合\neventsMixin(Vue) // 事件混合\nlifecycleMixin(Vue) // 生命周期混合\nrenderMixin(Vue) // 渲染混合\n\nexport default Vue\n```\n可以看到Vue的构造函数，里面只做了 `this._init(options)` 行为。这个 `_init` 方法在执行 `initMixin` 方法的时候定义了。找到同目录下的 `init.js` 文件。\n```\nexport function initMixin (Vue: Class<Component>) {\n  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      // 合并配置项\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm) // 初始化代理\n    } else {\n      vm._renderProxy = vm\n    }\n    \n    vm._self = vm // 暴露对象自身\n    initLifecycle(vm) // 初始化生命周期\n    initEvents(vm) // 初始化事件：on,once,off,emit\n    initRender(vm) // 初始化渲染：涉及到Virtual DOM\n    callHook(vm, 'beforeCreate') //  触发 beforeCreate 生命周期钩子\n    initInjections(vm) // 在初始化 data/props 前初始化Injections\n    initState(vm) // 初始化状态选项\n    initProvide(vm) // 在初始化 data/props 后初始化Provide\n    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject\n    callHook(vm, 'created') // 触发 created 生命周期钩子\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n    // 如果Vue配置项中有el，直接挂在到DOM中\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n}\n```\n抓住重点，**我们是要来学习State的。**从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。\n\n# 学习State\n之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：\n> 了解Vue的数据选项的运行机制。\n\n在[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。\n\n## 通过data理解mvvm\n这里我通过自己的思路再来整理下项目中data的实现。\n**注：**由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)中讲的非常清晰明了。\n\n**以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。**\n\n在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：\n1. 获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。\n2. 遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 `vm.name` 来修改和获取 data 中的 name 的值。\n3. 执行observe方法，监听data的变化。\n\n重点在 `observe` 方法，于是我们根据 import 关系找到 `src/core/observer/index.js` 文件。`observe` 方法通过传入的值最终返回一个Observer类的实例对象。\n找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。\n找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。\n**找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。**为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 `dep.depend()` 方法，在 set 方法中执行 `dep.notify()` 方法。这个先不多讲，最后进行联结说明。\n找到同目录下的 `dep.js` 文件，文件不长。定义了 Dep 类和`pushTarget`、`popTarget` 方法。在 Dep 类中有我们之前提到的 `depend` 和 `notify` 方法。看下两个方法的实现：\n```\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n```\n在 `depend` 方法中，Dep.target 就是一个 Watcher 实例，它的 `addDep` 方法最终会调用到 Dep 的 `addSubs` 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。\n在 `notify` 方法中，将 Watcher 数组 subs 遍历，执行他们的 `update` 方法。`update` 最终会去执行 `watcher` 的回调函数。\n即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。\n这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~\nWatcher的构造函数最终调用了 `get` 方法，代码如下：\n```\n get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      // \"touch\" every property so they are all tracked as\n      // dependencies for deep watching\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps()\n    }\n    return value\n  }\n```\n`get` 方法做了如下几步：\n1. 将当前 Watcher 实例传递给 Dep 的 Dep.target。\n2. 执行 Watcher 所监测的数据的 `getter` 方法。\n3. 最终，将 `Dep.target` 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。\n\n其中要注意的是，在第二步中数据的 `getter` 方法会执行到 `dep.depend()` 方法，`depend` 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~\n这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 `notify` 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，`notify` 方法遍历执行 watcher 的 `update` 方法，`update` 方法最终遍历执行回调函数。\n\n1. 执行 `observe` 方法，创建 Observer 执行 `walk` 为对象数据添加setter 和 getter\n2. 在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 `dep.depend()` 收集 watcher，在 setter 方法中执行 `dep.notify()` 方法，最终遍历执行 watcher 数组的回调函数。\n3. Dep 类似于 Watcher 和 Observer 的中间件。\n4. Watcher 用于监听变化，并执行回调函数。\n5. 当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target\n6. Watcher 调用监测数据的 `getter`方法触发 `dep.depend()`\n7. `dep.depend()`方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。\n8. 当被监测的数据内容发生改变时，执行 `setter` 方法，触发 `dep.notify()` 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。\n\n嗯……就是这样~之后把挖的坑填上！\n\n## watch实现\n\n说完了 Data 的监听流程，说说 watch 应该就不难啦~\n找到 `src/core/instance/state.js` 的 `initWatch` 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 `createWatcher` 方法。\n继续看 `createWatcher` 方法，这个方法也很简单，最终返回 `vm.$watch(keyOrFn, handler, options)`。我们继续往下找~\n在 `stateMixin` 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：\n```\n  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: any,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n```\n如果回调函数 cb 是一个对象，那么返回并执行 `createWatcher` 函数，最终还是会走到 $watch 方法中。\n否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。\n那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？\n```\nwatch: {\n  a: function(val, oldVal){\n    console.log(val)\n  }\n}\n```\n可以找到 `src/core/instance/observer/watcher.js` 中找到 `run` 方法。可以看到 `this.cb.call(this.vm, value, oldValue)` 这里的 cb 回调函数传递的参数就是 value 和 oldValue。\n这里说个基础知识，函数使用[ call 方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)执行，第一个参数是方法的this值，之后才是真正的参数。\n```\nrun () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        // Deep watchers and watchers on Object/Arrays should fire even\n        // when the value is the same, because the value may\n        // have mutated.\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n```\n**小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。**\n\n## props实现\n\n接下来我们看看props，官网对props的定义如下：\n\n> props 可以是数组或对象，用于接收来自父组件的数据。\n\n找到 `initProps` 方法。\n```\nfunction initProps (vm: Component, propsOptions: Object) {\n  const propsData = vm.$options.propsData || {}\n  const props = vm._props = {}\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  const keys = vm.$options._propKeys = []\n  const isRoot = !vm.$parent\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot\n  for (const key in propsOptions) {\n    keys.push(key)\n    const value = validateProp(key, propsOptions, propsData, vm)\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      const hyphenatedKey = hyphenate(key)\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          `\"${hyphenatedKey}\" is a reserved attribute and cannot be used as component prop.`,\n          vm\n        )\n      }\n      defineReactive(props, key, value, () => {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            `Avoid mutating a prop directly since the value will be ` +\n            `overwritten whenever the parent component re-renders. ` +\n            `Instead, use a data or computed property based on the prop's ` +\n            `value. Prop being mutated: \"${key}\"`,\n            vm\n          )\n        }\n      })\n    } else {\n      defineReactive(props, key, value)\n    }\n\n    if (!(key in vm)) {\n      proxy(vm, `_props`, key)\n    }\n  }\n  observerState.shouldConvert = true\n}\n```\n可以看到，props 和 data 类似。在 `initProps` 中无非做了两步：`defineReactive` 和 `proxy`，这两个方法我们在提到 data 的时候讲过了。`defineReactive` 为数据设置 setter、getter，`proxy` 方法将 `props` 中的属性映射到 Vue 实例 vm 上，便于我们可以用 `vm.myProps` 来获取数据。\n至此，我有个疑问：data与props有何不同呢？\ndata使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。\n另外，data和props有个不同的地方就是props是不建议改变的。详见[单向数据流](https://cn.vuejs.org/v2/guide/components.html#单向数据流)\n小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~\n\n## computed实现\n\n再来说说computed，找到初始化computed方法 `src/core/instance/state.js` 中的 `initComputed` 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 `defineComputed `方法。\n```\nfunction initComputed (vm: Component, computed: Object) {\n  ...\n  for (const key in computed) {\n    ...\n    if (!isSSR) {\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } \n    ...\n  }\n}\n```\ndefineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 `Object.defineProperty(target, key, sharedPropertyDefinition)`。自此，我们可以通过 `vm.computedValue` 来获取计算属性结果了。\n**小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。**\n\n## methods实现\n\n继续在 `state.js` 中看到 `initMethods` 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：\n```\nfunction initMethods (vm: Component, methods: Object) {\n  const props = vm.$options.props\n  for (const key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          `Method \"${key}\" has an undefined value in the component definition. ` +\n          `Did you reference the function correctly?`,\n          vm\n        )\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          `Method \"${key}\" has already been defined as a prop.`,\n          vm\n        )\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          `Method \"${key}\" conflicts with an existing Vue instance method. ` +\n          `Avoid defining component methods that start with _ or $.`\n        )\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)\n  }\n}\n```\n重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 `bind` 方法执行该函数。\n找到这个 `bind` 方法，位置在 `src/shared/util.js` 中。\n```\nexport function bind (fn: Function, ctx: Object): Function {\n  function boundFn (a) {\n    const l: number = arguments.length\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length\n  return boundFn\n}\n```\n该方法返回一个执行 `methods` 中函数的方法（这种方法的执行方式比较快）。\n**小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。**\n\n# 最后\n\n本文纯属个人理解，如有任何问题，请及时指出，不胜感激~\n最后提出一个看源码的小心得：\n> 我发现……看源码、跟流程，尽量将注意力集中在**方法的执行**和**类的实例化**行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。\n\n至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……\n通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！\n\n\n# Vue.js学习系列\n鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。\n\n[Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）](http://www.jianshu.com/p/8013d8d37bd0)\n[Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）](http://www.jianshu.com/p/d6f7e11f18af)\n[Vue.js学习系列三 —— axios和网络传输相关知识的学习实践](http://www.jianshu.com/p/8e5fb763c3d7)\n[Vue.js学习系列四 —— Webpack打包工具的使用](http://www.jianshu.com/p/aef34acd111f)\n[Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint](http://www.jianshu.com/p/efb6fbed6fac)\n[Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记](http://www.jianshu.com/p/073d25a3bba0)\n[Vue.js学习系列七 —— Vue服务器渲染Nuxt学习](https://www.jianshu.com/p/ba7466d7101a)\n[Vue.js学习系列八 —— Vue源码学习之State学习](https://www.jianshu.com/p/15028f91226e)\n\n# Vue.js学习系列项目地址\n本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。\n[https://github.com/violetjack/VueStudyDemos](https://github.com/violetjack/VueStudyDemos)\n\n# 关于作者\nVioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。\n欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。\n\n新浪微博： http://weibo.com/u/2640909603\n掘金：https://gold.xitu.io/user/571d953d39b0570068145cd1\nCSDN: http://blog.csdn.net/violetjack0808\n简书： http://www.jianshu.com/users/54ae4af3a98d/latest_articles\nGithub： https://github.com/violetjack\n\n\n","source":"_posts/Vue.js学习系列八 —— Vue源码学习之State学习.md","raw":"---\ntitle: Vue.js学习系列八 —— Vue源码学习之State学习\n---\n\n> 关于Vue源码学习的博客， [HcySunYang](http://hcysun.me/)的[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。\n注意：本文所用Vue版本为 `2.5.13`\n\n# 关于源码学习\n关于学习源码，我有话要说~\n一开始我学习Vue的源码，是将 [Vue.js](https://github.com/vuejs/vue/blob/dev/dist/vue.js) 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。\n其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。\n所以呢，我看源码的经验教训有如下几点：\n* 看代码，必须带着问题去找实现代码。\n* 保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。\n* 找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。\n* 想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~\n* 学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~\n\n# 如何开始\n这里我们来解决从哪里开始看代码的流程，重点是**找到Vue构造函数的实现**。\n首先，找到 `package.json` 文件，从中找到编译命令 `\"dev\": \"rollup -w -c scripts/config.js --environment TARGET:web-full-dev\"`，这里 `rollup` 是类似于 Webpack 的打包工具，打包文件在 `script/config.js` 中，找到该文件。找 `entry` 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 `dist/vue.js` 的配置项：\n```\n  // Runtime+compiler development build (Browser)\n  'web-full-dev': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.js'),\n    format: 'umd',\n    env: 'development',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n```\n好，这里就找到了 `web/entry-runtime-with-compiler.js` 这个路径，完整路径应该是 `src/platform/web/entry-runtime-with-compiler.js`。在这个文件中我们找到一个Vue对象import进来了。\n```\nimport Vue from './runtime/index'\n```\n我们顺着找到到 `src/platform/web/runtime/index.js` 这个文件，在文件中发现导入文件 \n```\nimport Vue from 'core/index'\n```\n就顺着这个思路找，最终找到 `src/core/instance/index.js` 这个文件。\n完整找到Vue实例入口文件的流程如下：\n```\npackage.json\nscript/config.js\nsrc/platform/web/entry-runtime-with-compiler.js\nsrc/platform/web/runtime/index.js\nsrc/core/index.js\nsrc/core/instance/index.js\n```\n简单看看Vue构造函数的样子~\n```\nimport { initMixin } from './init'\nimport { stateMixin } from './state'\nimport { renderMixin } from './render'\nimport { eventsMixin } from './events'\nimport { lifecycleMixin } from './lifecycle'\nimport { warn } from '../util/index'\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n\ninitMixin(Vue) // 初始化\nstateMixin(Vue) // 状态混合\neventsMixin(Vue) // 事件混合\nlifecycleMixin(Vue) // 生命周期混合\nrenderMixin(Vue) // 渲染混合\n\nexport default Vue\n```\n可以看到Vue的构造函数，里面只做了 `this._init(options)` 行为。这个 `_init` 方法在执行 `initMixin` 方法的时候定义了。找到同目录下的 `init.js` 文件。\n```\nexport function initMixin (Vue: Class<Component>) {\n  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      // 合并配置项\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm) // 初始化代理\n    } else {\n      vm._renderProxy = vm\n    }\n    \n    vm._self = vm // 暴露对象自身\n    initLifecycle(vm) // 初始化生命周期\n    initEvents(vm) // 初始化事件：on,once,off,emit\n    initRender(vm) // 初始化渲染：涉及到Virtual DOM\n    callHook(vm, 'beforeCreate') //  触发 beforeCreate 生命周期钩子\n    initInjections(vm) // 在初始化 data/props 前初始化Injections\n    initState(vm) // 初始化状态选项\n    initProvide(vm) // 在初始化 data/props 后初始化Provide\n    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject\n    callHook(vm, 'created') // 触发 created 生命周期钩子\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n    // 如果Vue配置项中有el，直接挂在到DOM中\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n}\n```\n抓住重点，**我们是要来学习State的。**从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。\n\n# 学习State\n之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：\n> 了解Vue的数据选项的运行机制。\n\n在[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。\n\n## 通过data理解mvvm\n这里我通过自己的思路再来整理下项目中data的实现。\n**注：**由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，[Vue2.1.7源码学习](http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/)中讲的非常清晰明了。\n\n**以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。**\n\n在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：\n1. 获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。\n2. 遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 `vm.name` 来修改和获取 data 中的 name 的值。\n3. 执行observe方法，监听data的变化。\n\n重点在 `observe` 方法，于是我们根据 import 关系找到 `src/core/observer/index.js` 文件。`observe` 方法通过传入的值最终返回一个Observer类的实例对象。\n找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。\n找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。\n**找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。**为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 `dep.depend()` 方法，在 set 方法中执行 `dep.notify()` 方法。这个先不多讲，最后进行联结说明。\n找到同目录下的 `dep.js` 文件，文件不长。定义了 Dep 类和`pushTarget`、`popTarget` 方法。在 Dep 类中有我们之前提到的 `depend` 和 `notify` 方法。看下两个方法的实现：\n```\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n```\n在 `depend` 方法中，Dep.target 就是一个 Watcher 实例，它的 `addDep` 方法最终会调用到 Dep 的 `addSubs` 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。\n在 `notify` 方法中，将 Watcher 数组 subs 遍历，执行他们的 `update` 方法。`update` 最终会去执行 `watcher` 的回调函数。\n即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。\n这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~\nWatcher的构造函数最终调用了 `get` 方法，代码如下：\n```\n get () {\n    pushTarget(this)\n    let value\n    const vm = this.vm\n    try {\n      value = this.getter.call(vm, vm)\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      // \"touch\" every property so they are all tracked as\n      // dependencies for deep watching\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps()\n    }\n    return value\n  }\n```\n`get` 方法做了如下几步：\n1. 将当前 Watcher 实例传递给 Dep 的 Dep.target。\n2. 执行 Watcher 所监测的数据的 `getter` 方法。\n3. 最终，将 `Dep.target` 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。\n\n其中要注意的是，在第二步中数据的 `getter` 方法会执行到 `dep.depend()` 方法，`depend` 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~\n这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 `notify` 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，`notify` 方法遍历执行 watcher 的 `update` 方法，`update` 方法最终遍历执行回调函数。\n\n1. 执行 `observe` 方法，创建 Observer 执行 `walk` 为对象数据添加setter 和 getter\n2. 在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 `dep.depend()` 收集 watcher，在 setter 方法中执行 `dep.notify()` 方法，最终遍历执行 watcher 数组的回调函数。\n3. Dep 类似于 Watcher 和 Observer 的中间件。\n4. Watcher 用于监听变化，并执行回调函数。\n5. 当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target\n6. Watcher 调用监测数据的 `getter`方法触发 `dep.depend()`\n7. `dep.depend()`方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。\n8. 当被监测的数据内容发生改变时，执行 `setter` 方法，触发 `dep.notify()` 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。\n\n嗯……就是这样~之后把挖的坑填上！\n\n## watch实现\n\n说完了 Data 的监听流程，说说 watch 应该就不难啦~\n找到 `src/core/instance/state.js` 的 `initWatch` 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 `createWatcher` 方法。\n继续看 `createWatcher` 方法，这个方法也很简单，最终返回 `vm.$watch(keyOrFn, handler, options)`。我们继续往下找~\n在 `stateMixin` 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：\n```\n  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: any,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n```\n如果回调函数 cb 是一个对象，那么返回并执行 `createWatcher` 函数，最终还是会走到 $watch 方法中。\n否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。\n那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？\n```\nwatch: {\n  a: function(val, oldVal){\n    console.log(val)\n  }\n}\n```\n可以找到 `src/core/instance/observer/watcher.js` 中找到 `run` 方法。可以看到 `this.cb.call(this.vm, value, oldValue)` 这里的 cb 回调函数传递的参数就是 value 和 oldValue。\n这里说个基础知识，函数使用[ call 方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)执行，第一个参数是方法的this值，之后才是真正的参数。\n```\nrun () {\n    if (this.active) {\n      const value = this.get()\n      if (\n        value !== this.value ||\n        // Deep watchers and watchers on Object/Arrays should fire even\n        // when the value is the same, because the value may\n        // have mutated.\n        isObject(value) ||\n        this.deep\n      ) {\n        // set new value\n        const oldValue = this.value\n        this.value = value\n        if (this.user) {\n          try {\n            this.cb.call(this.vm, value, oldValue)\n          } catch (e) {\n            handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n          }\n        } else {\n          this.cb.call(this.vm, value, oldValue)\n        }\n      }\n    }\n  }\n```\n**小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。**\n\n## props实现\n\n接下来我们看看props，官网对props的定义如下：\n\n> props 可以是数组或对象，用于接收来自父组件的数据。\n\n找到 `initProps` 方法。\n```\nfunction initProps (vm: Component, propsOptions: Object) {\n  const propsData = vm.$options.propsData || {}\n  const props = vm._props = {}\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  const keys = vm.$options._propKeys = []\n  const isRoot = !vm.$parent\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot\n  for (const key in propsOptions) {\n    keys.push(key)\n    const value = validateProp(key, propsOptions, propsData, vm)\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      const hyphenatedKey = hyphenate(key)\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          `\"${hyphenatedKey}\" is a reserved attribute and cannot be used as component prop.`,\n          vm\n        )\n      }\n      defineReactive(props, key, value, () => {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            `Avoid mutating a prop directly since the value will be ` +\n            `overwritten whenever the parent component re-renders. ` +\n            `Instead, use a data or computed property based on the prop's ` +\n            `value. Prop being mutated: \"${key}\"`,\n            vm\n          )\n        }\n      })\n    } else {\n      defineReactive(props, key, value)\n    }\n\n    if (!(key in vm)) {\n      proxy(vm, `_props`, key)\n    }\n  }\n  observerState.shouldConvert = true\n}\n```\n可以看到，props 和 data 类似。在 `initProps` 中无非做了两步：`defineReactive` 和 `proxy`，这两个方法我们在提到 data 的时候讲过了。`defineReactive` 为数据设置 setter、getter，`proxy` 方法将 `props` 中的属性映射到 Vue 实例 vm 上，便于我们可以用 `vm.myProps` 来获取数据。\n至此，我有个疑问：data与props有何不同呢？\ndata使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。\n另外，data和props有个不同的地方就是props是不建议改变的。详见[单向数据流](https://cn.vuejs.org/v2/guide/components.html#单向数据流)\n小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~\n\n## computed实现\n\n再来说说computed，找到初始化computed方法 `src/core/instance/state.js` 中的 `initComputed` 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 `defineComputed `方法。\n```\nfunction initComputed (vm: Component, computed: Object) {\n  ...\n  for (const key in computed) {\n    ...\n    if (!isSSR) {\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef)\n    } \n    ...\n  }\n}\n```\ndefineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 `Object.defineProperty(target, key, sharedPropertyDefinition)`。自此，我们可以通过 `vm.computedValue` 来获取计算属性结果了。\n**小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。**\n\n## methods实现\n\n继续在 `state.js` 中看到 `initMethods` 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：\n```\nfunction initMethods (vm: Component, methods: Object) {\n  const props = vm.$options.props\n  for (const key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          `Method \"${key}\" has an undefined value in the component definition. ` +\n          `Did you reference the function correctly?`,\n          vm\n        )\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          `Method \"${key}\" has already been defined as a prop.`,\n          vm\n        )\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          `Method \"${key}\" conflicts with an existing Vue instance method. ` +\n          `Avoid defining component methods that start with _ or $.`\n        )\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)\n  }\n}\n```\n重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 `bind` 方法执行该函数。\n找到这个 `bind` 方法，位置在 `src/shared/util.js` 中。\n```\nexport function bind (fn: Function, ctx: Object): Function {\n  function boundFn (a) {\n    const l: number = arguments.length\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length\n  return boundFn\n}\n```\n该方法返回一个执行 `methods` 中函数的方法（这种方法的执行方式比较快）。\n**小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。**\n\n# 最后\n\n本文纯属个人理解，如有任何问题，请及时指出，不胜感激~\n最后提出一个看源码的小心得：\n> 我发现……看源码、跟流程，尽量将注意力集中在**方法的执行**和**类的实例化**行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。\n\n至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……\n通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！\n\n\n# Vue.js学习系列\n鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。\n\n[Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）](http://www.jianshu.com/p/8013d8d37bd0)\n[Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）](http://www.jianshu.com/p/d6f7e11f18af)\n[Vue.js学习系列三 —— axios和网络传输相关知识的学习实践](http://www.jianshu.com/p/8e5fb763c3d7)\n[Vue.js学习系列四 —— Webpack打包工具的使用](http://www.jianshu.com/p/aef34acd111f)\n[Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint](http://www.jianshu.com/p/efb6fbed6fac)\n[Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记](http://www.jianshu.com/p/073d25a3bba0)\n[Vue.js学习系列七 —— Vue服务器渲染Nuxt学习](https://www.jianshu.com/p/ba7466d7101a)\n[Vue.js学习系列八 —— Vue源码学习之State学习](https://www.jianshu.com/p/15028f91226e)\n\n# Vue.js学习系列项目地址\n本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。\n[https://github.com/violetjack/VueStudyDemos](https://github.com/violetjack/VueStudyDemos)\n\n# 关于作者\nVioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。\n欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。\n\n新浪微博： http://weibo.com/u/2640909603\n掘金：https://gold.xitu.io/user/571d953d39b0570068145cd1\nCSDN: http://blog.csdn.net/violetjack0808\n简书： http://www.jianshu.com/users/54ae4af3a98d/latest_articles\nGithub： https://github.com/violetjack\n\n\n","slug":"Vue.js学习系列八 —— Vue源码学习之State学习","published":1,"date":"2018-02-06T06:47:59.520Z","updated":"2018-02-06T06:48:47.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdbdpr3u0002orbtqzn9g0kp","content":"<blockquote>\n<p>关于Vue源码学习的博客， <a href=\"http://hcysun.me/\" target=\"_blank\" rel=\"noopener\">HcySunYang</a>的<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。<br>注意：本文所用Vue版本为 <code>2.5.13</code></p>\n</blockquote>\n<h1 id=\"关于源码学习\"><a href=\"#关于源码学习\" class=\"headerlink\" title=\"关于源码学习\"></a>关于源码学习</h1><p>关于学习源码，我有话要说~<br>一开始我学习Vue的源码，是将 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/vue.js\" target=\"_blank\" rel=\"noopener\">Vue.js</a> 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。<br>其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。<br>所以呢，我看源码的经验教训有如下几点：</p>\n<ul>\n<li>看代码，必须带着问题去找实现代码。</li>\n<li>保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。</li>\n<li>找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。</li>\n<li>想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~</li>\n<li>学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~</li>\n</ul>\n<h1 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h1><p>这里我们来解决从哪里开始看代码的流程，重点是<strong>找到Vue构造函数的实现</strong>。<br>首先，找到 <code>package.json</code> 文件，从中找到编译命令 <code>&quot;dev&quot;: &quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</code>，这里 <code>rollup</code> 是类似于 Webpack 的打包工具，打包文件在 <code>script/config.js</code> 中，找到该文件。找 <code>entry</code> 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 <code>dist/vue.js</code> 的配置项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Runtime+compiler development build (Browser)</span><br><span class=\"line\">&apos;web-full-dev&apos;: &#123;</span><br><span class=\"line\">  entry: resolve(&apos;web/entry-runtime-with-compiler.js&apos;),</span><br><span class=\"line\">  dest: resolve(&apos;dist/vue.js&apos;),</span><br><span class=\"line\">  format: &apos;umd&apos;,</span><br><span class=\"line\">  env: &apos;development&apos;,</span><br><span class=\"line\">  alias: &#123; he: &apos;./entity-decoder&apos; &#125;,</span><br><span class=\"line\">  banner</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>好，这里就找到了 <code>web/entry-runtime-with-compiler.js</code> 这个路径，完整路径应该是 <code>src/platform/web/entry-runtime-with-compiler.js</code>。在这个文件中我们找到一个Vue对象import进来了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;./runtime/index&apos;</span><br></pre></td></tr></table></figure></p>\n<p>我们顺着找到到 <code>src/platform/web/runtime/index.js</code> 这个文件，在文件中发现导入文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;core/index&apos;</span><br></pre></td></tr></table></figure></p>\n<p>就顺着这个思路找，最终找到 <code>src/core/instance/index.js</code> 这个文件。<br>完整找到Vue实例入口文件的流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">script/config.js</span><br><span class=\"line\">src/platform/web/entry-runtime-with-compiler.js</span><br><span class=\"line\">src/platform/web/runtime/index.js</span><br><span class=\"line\">src/core/index.js</span><br><span class=\"line\">src/core/instance/index.js</span><br></pre></td></tr></table></figure></p>\n<p>简单看看Vue构造函数的样子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; initMixin &#125; from &apos;./init&apos;</span><br><span class=\"line\">import &#123; stateMixin &#125; from &apos;./state&apos;</span><br><span class=\"line\">import &#123; renderMixin &#125; from &apos;./render&apos;</span><br><span class=\"line\">import &#123; eventsMixin &#125; from &apos;./events&apos;</span><br><span class=\"line\">import &#123; lifecycleMixin &#125; from &apos;./lifecycle&apos;</span><br><span class=\"line\">import &#123; warn &#125; from &apos;../util/index&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">function Vue (options) &#123;</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">initMixin(Vue) // 初始化</span><br><span class=\"line\">stateMixin(Vue) // 状态混合</span><br><span class=\"line\">eventsMixin(Vue) // 事件混合</span><br><span class=\"line\">lifecycleMixin(Vue) // 生命周期混合</span><br><span class=\"line\">renderMixin(Vue) // 渲染混合</span><br><span class=\"line\"></span><br><span class=\"line\">export default Vue</span><br></pre></td></tr></table></figure></p>\n<p>可以看到Vue的构造函数，里面只做了 <code>this._init(options)</code> 行为。这个 <code>_init</code> 方法在执行 <code>initMixin</code> 方法的时候定义了。找到同目录下的 <code>init.js</code> 文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class=\"line\">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    // a uid</span><br><span class=\"line\">    vm._uid = uid++</span><br><span class=\"line\"></span><br><span class=\"line\">    let startTag, endTag</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">      startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class=\"line\">      endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class=\"line\">      mark(startTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // a flag to avoid this being observed</span><br><span class=\"line\">    vm._isVue = true</span><br><span class=\"line\">    // merge options</span><br><span class=\"line\">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class=\"line\">      // optimize internal component instantiation</span><br><span class=\"line\">      // since dynamic options merging is pretty slow, and none of the</span><br><span class=\"line\">      // internal component options needs special treatment.</span><br><span class=\"line\">      initInternalComponent(vm, options)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 合并配置项</span><br><span class=\"line\">      vm.$options = mergeOptions(</span><br><span class=\"line\">        resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      initProxy(vm) // 初始化代理</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      vm._renderProxy = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vm._self = vm // 暴露对象自身</span><br><span class=\"line\">    initLifecycle(vm) // 初始化生命周期</span><br><span class=\"line\">    initEvents(vm) // 初始化事件：on,once,off,emit</span><br><span class=\"line\">    initRender(vm) // 初始化渲染：涉及到Virtual DOM</span><br><span class=\"line\">    callHook(vm, &apos;beforeCreate&apos;) //  触发 beforeCreate 生命周期钩子</span><br><span class=\"line\">    initInjections(vm) // 在初始化 data/props 前初始化Injections</span><br><span class=\"line\">    initState(vm) // 初始化状态选项</span><br><span class=\"line\">    initProvide(vm) // 在初始化 data/props 后初始化Provide</span><br><span class=\"line\">    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject</span><br><span class=\"line\">    callHook(vm, &apos;created&apos;) // 触发 created 生命周期钩子</span><br><span class=\"line\"></span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">      vm._name = formatComponentName(vm, false)</span><br><span class=\"line\">      mark(endTag)</span><br><span class=\"line\">      measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 如果Vue配置项中有el，直接挂在到DOM中</span><br><span class=\"line\">    if (vm.$options.el) &#123;</span><br><span class=\"line\">      vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抓住重点，<strong>我们是要来学习State的。</strong>从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。</p>\n<h1 id=\"学习State\"><a href=\"#学习State\" class=\"headerlink\" title=\"学习State\"></a>学习State</h1><p>之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：</p>\n<blockquote>\n<p>了解Vue的数据选项的运行机制。</p>\n</blockquote>\n<p>在<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。</p>\n<h2 id=\"通过data理解mvvm\"><a href=\"#通过data理解mvvm\" class=\"headerlink\" title=\"通过data理解mvvm\"></a>通过data理解mvvm</h2><p>这里我通过自己的思路再来整理下项目中data的实现。<br><strong>注：</strong>由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>中讲的非常清晰明了。</p>\n<p><strong>以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。</strong></p>\n<p>在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：</p>\n<ol>\n<li>获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。</li>\n<li>遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 <code>vm.name</code> 来修改和获取 data 中的 name 的值。</li>\n<li>执行observe方法，监听data的变化。</li>\n</ol>\n<p>重点在 <code>observe</code> 方法，于是我们根据 import 关系找到 <code>src/core/observer/index.js</code> 文件。<code>observe</code> 方法通过传入的值最终返回一个Observer类的实例对象。<br>找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。<br>找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。<br><strong>找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。</strong>为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 <code>dep.depend()</code> 方法，在 set 方法中执行 <code>dep.notify()</code> 方法。这个先不多讲，最后进行联结说明。<br>找到同目录下的 <code>dep.js</code> 文件，文件不长。定义了 Dep 类和<code>pushTarget</code>、<code>popTarget</code> 方法。在 Dep 类中有我们之前提到的 <code>depend</code> 和 <code>notify</code> 方法。看下两个方法的实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  if (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">notify () &#123;</span><br><span class=\"line\">  // stabilize the subscriber list first</span><br><span class=\"line\">  const subs = this.subs.slice()</span><br><span class=\"line\">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>depend</code> 方法中，Dep.target 就是一个 Watcher 实例，它的 <code>addDep</code> 方法最终会调用到 Dep 的 <code>addSubs</code> 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。<br>在 <code>notify</code> 方法中，将 Watcher 数组 subs 遍历，执行他们的 <code>update</code> 方法。<code>update</code> 最终会去执行 <code>watcher</code> 的回调函数。<br>即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。<br>这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~<br>Watcher的构造函数最终调用了 <code>get</code> 方法，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">   pushTarget(this)</span><br><span class=\"line\">   let value</span><br><span class=\"line\">   const vm = this.vm</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">     value = this.getter.call(vm, vm)</span><br><span class=\"line\">   &#125; catch (e) &#123;</span><br><span class=\"line\">     if (this.user) &#123;</span><br><span class=\"line\">       handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">       throw e</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; finally &#123;</span><br><span class=\"line\">     // &quot;touch&quot; every property so they are all tracked as</span><br><span class=\"line\">     // dependencies for deep watching</span><br><span class=\"line\">     if (this.deep) &#123;</span><br><span class=\"line\">       traverse(value)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     popTarget()</span><br><span class=\"line\">     this.cleanupDeps()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return value</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>get</code> 方法做了如下几步：</p>\n<ol>\n<li>将当前 Watcher 实例传递给 Dep 的 Dep.target。</li>\n<li>执行 Watcher 所监测的数据的 <code>getter</code> 方法。</li>\n<li>最终，将 <code>Dep.target</code> 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。</li>\n</ol>\n<p>其中要注意的是，在第二步中数据的 <code>getter</code> 方法会执行到 <code>dep.depend()</code> 方法，<code>depend</code> 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~<br>这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 <code>notify</code> 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，<code>notify</code> 方法遍历执行 watcher 的 <code>update</code> 方法，<code>update</code> 方法最终遍历执行回调函数。</p>\n<ol>\n<li>执行 <code>observe</code> 方法，创建 Observer 执行 <code>walk</code> 为对象数据添加setter 和 getter</li>\n<li>在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 <code>dep.depend()</code> 收集 watcher，在 setter 方法中执行 <code>dep.notify()</code> 方法，最终遍历执行 watcher 数组的回调函数。</li>\n<li>Dep 类似于 Watcher 和 Observer 的中间件。</li>\n<li>Watcher 用于监听变化，并执行回调函数。</li>\n<li>当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target</li>\n<li>Watcher 调用监测数据的 <code>getter</code>方法触发 <code>dep.depend()</code></li>\n<li><code>dep.depend()</code>方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。</li>\n<li>当被监测的数据内容发生改变时，执行 <code>setter</code> 方法，触发 <code>dep.notify()</code> 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。</li>\n</ol>\n<p>嗯……就是这样~之后把挖的坑填上！</p>\n<h2 id=\"watch实现\"><a href=\"#watch实现\" class=\"headerlink\" title=\"watch实现\"></a>watch实现</h2><p>说完了 Data 的监听流程，说说 watch 应该就不难啦~<br>找到 <code>src/core/instance/state.js</code> 的 <code>initWatch</code> 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 <code>createWatcher</code> 方法。<br>继续看 <code>createWatcher</code> 方法，这个方法也很简单，最终返回 <code>vm.$watch(keyOrFn, handler, options)</code>。我们继续往下找~<br>在 <code>stateMixin</code> 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$watch = function (</span><br><span class=\"line\">  expOrFn: string | Function,</span><br><span class=\"line\">  cb: any,</span><br><span class=\"line\">  options?: Object</span><br><span class=\"line\">): Function &#123;</span><br><span class=\"line\">  const vm: Component = this</span><br><span class=\"line\">  if (isPlainObject(cb)) &#123;</span><br><span class=\"line\">    return createWatcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\">  options.user = true</span><br><span class=\"line\">  const watcher = new Watcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">  if (options.immediate) &#123;</span><br><span class=\"line\">    cb.call(vm, watcher.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function unwatchFn () &#123;</span><br><span class=\"line\">    watcher.teardown()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果回调函数 cb 是一个对象，那么返回并执行 <code>createWatcher</code> 函数，最终还是会走到 $watch 方法中。<br>否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。<br>那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  a: function(val, oldVal)&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以找到 <code>src/core/instance/observer/watcher.js</code> 中找到 <code>run</code> 方法。可以看到 <code>this.cb.call(this.vm, value, oldValue)</code> 这里的 cb 回调函数传递的参数就是 value 和 oldValue。<br>这里说个基础知识，函数使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"> call 方法</a>执行，第一个参数是方法的this值，之后才是真正的参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run () &#123;</span><br><span class=\"line\">    if (this.active) &#123;</span><br><span class=\"line\">      const value = this.get()</span><br><span class=\"line\">      if (</span><br><span class=\"line\">        value !== this.value ||</span><br><span class=\"line\">        // Deep watchers and watchers on Object/Arrays should fire even</span><br><span class=\"line\">        // when the value is the same, because the value may</span><br><span class=\"line\">        // have mutated.</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        this.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        // set new value</span><br><span class=\"line\">        const oldValue = this.value</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\">        if (this.user) &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            this.cb.call(this.vm, value, oldValue)</span><br><span class=\"line\">          &#125; catch (e) &#123;</span><br><span class=\"line\">            handleError(e, this.vm, `callback for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.cb.call(this.vm, value, oldValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。</strong></p>\n<h2 id=\"props实现\"><a href=\"#props实现\" class=\"headerlink\" title=\"props实现\"></a>props实现</h2><p>接下来我们看看props，官网对props的定义如下：</p>\n<blockquote>\n<p>props 可以是数组或对象，用于接收来自父组件的数据。</p>\n</blockquote>\n<p>找到 <code>initProps</code> 方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initProps (vm: Component, propsOptions: Object) &#123;</span><br><span class=\"line\">  const propsData = vm.$options.propsData || &#123;&#125;</span><br><span class=\"line\">  const props = vm._props = &#123;&#125;</span><br><span class=\"line\">  // cache prop keys so that future props updates can iterate using Array</span><br><span class=\"line\">  // instead of dynamic object key enumeration.</span><br><span class=\"line\">  const keys = vm.$options._propKeys = []</span><br><span class=\"line\">  const isRoot = !vm.$parent</span><br><span class=\"line\">  // root instance props should be converted</span><br><span class=\"line\">  observerState.shouldConvert = isRoot</span><br><span class=\"line\">  for (const key in propsOptions) &#123;</span><br><span class=\"line\">    keys.push(key)</span><br><span class=\"line\">    const value = validateProp(key, propsOptions, propsData, vm)</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      const hyphenatedKey = hyphenate(key)</span><br><span class=\"line\">      if (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `&quot;$&#123;hyphenatedKey&#125;&quot; is a reserved attribute and cannot be used as component prop.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class=\"line\">        if (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            `Avoid mutating a prop directly since the value will be ` +</span><br><span class=\"line\">            `overwritten whenever the parent component re-renders. ` +</span><br><span class=\"line\">            `Instead, use a data or computed property based on the prop&apos;s ` +</span><br><span class=\"line\">            `value. Prop being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      defineReactive(props, key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!(key in vm)) &#123;</span><br><span class=\"line\">      proxy(vm, `_props`, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  observerState.shouldConvert = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，props 和 data 类似。在 <code>initProps</code> 中无非做了两步：<code>defineReactive</code> 和 <code>proxy</code>，这两个方法我们在提到 data 的时候讲过了。<code>defineReactive</code> 为数据设置 setter、getter，<code>proxy</code> 方法将 <code>props</code> 中的属性映射到 Vue 实例 vm 上，便于我们可以用 <code>vm.myProps</code> 来获取数据。<br>至此，我有个疑问：data与props有何不同呢？<br>data使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。<br>另外，data和props有个不同的地方就是props是不建议改变的。详见<a href=\"https://cn.vuejs.org/v2/guide/components.html#单向数据流\" target=\"_blank\" rel=\"noopener\">单向数据流</a><br>小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~</p>\n<h2 id=\"computed实现\"><a href=\"#computed实现\" class=\"headerlink\" title=\"computed实现\"></a>computed实现</h2><p>再来说说computed，找到初始化computed方法 <code>src/core/instance/state.js</code> 中的 <code>initComputed</code> 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 <code>defineComputed</code>方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initComputed (vm: Component, computed: Object) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  for (const key in computed) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    if (!isSSR) &#123;</span><br><span class=\"line\">      watchers[key] = new Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!(key in vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>defineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 <code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>。自此，我们可以通过 <code>vm.computedValue</code> 来获取计算属性结果了。<br><strong>小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。</strong></p>\n<h2 id=\"methods实现\"><a href=\"#methods实现\" class=\"headerlink\" title=\"methods实现\"></a>methods实现</h2><p>继续在 <code>state.js</code> 中看到 <code>initMethods</code> 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initMethods (vm: Component, methods: Object) &#123;</span><br><span class=\"line\">  const props = vm.$options.props</span><br><span class=\"line\">  for (const key in methods) &#123;</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      if (methods[key] == null) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; has an undefined value in the component definition. ` +</span><br><span class=\"line\">          `Did you reference the function correctly?`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; has already been defined as a prop.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if ((key in vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; conflicts with an existing Vue instance method. ` +</span><br><span class=\"line\">          `Avoid defining component methods that start with _ or $.`</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 <code>bind</code> 方法执行该函数。<br>找到这个 <code>bind</code> 方法，位置在 <code>src/shared/util.js</code> 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function bind (fn: Function, ctx: Object): Function &#123;</span><br><span class=\"line\">  function boundFn (a) &#123;</span><br><span class=\"line\">    const l: number = arguments.length</span><br><span class=\"line\">    return l</span><br><span class=\"line\">      ? l &gt; 1</span><br><span class=\"line\">        ? fn.apply(ctx, arguments)</span><br><span class=\"line\">        : fn.call(ctx, a)</span><br><span class=\"line\">      : fn.call(ctx)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // record original fn length</span><br><span class=\"line\">  boundFn._length = fn.length</span><br><span class=\"line\">  return boundFn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法返回一个执行 <code>methods</code> 中函数的方法（这种方法的执行方式比较快）。<br><strong>小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。</strong></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>本文纯属个人理解，如有任何问题，请及时指出，不胜感激~<br>最后提出一个看源码的小心得：</p>\n<blockquote>\n<p>我发现……看源码、跟流程，尽量将注意力集中在<strong>方法的执行</strong>和<strong>类的实例化</strong>行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。</p>\n</blockquote>\n<p>至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……<br>通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！</p>\n<h1 id=\"Vue-js学习系列\"><a href=\"#Vue-js学习系列\" class=\"headerlink\" title=\"Vue.js学习系列\"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p>\n<p><a href=\"http://www.jianshu.com/p/8013d8d37bd0\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href=\"http://www.jianshu.com/p/d6f7e11f18af\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href=\"http://www.jianshu.com/p/8e5fb763c3d7\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href=\"http://www.jianshu.com/p/aef34acd111f\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href=\"http://www.jianshu.com/p/efb6fbed6fac\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href=\"http://www.jianshu.com/p/073d25a3bba0\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href=\"https://www.jianshu.com/p/ba7466d7101a\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href=\"https://www.jianshu.com/p/15028f91226e\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列八 —— Vue源码学习之State学习</a></p>\n<h1 id=\"Vue-js学习系列项目地址\"><a href=\"#Vue-js学习系列项目地址\" class=\"headerlink\" title=\"Vue.js学习系列项目地址\"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href=\"https://github.com/violetjack/VueStudyDemos\" target=\"_blank\" rel=\"noopener\">https://github.com/violetjack/VueStudyDemos</a></p>\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p>\n<p>新浪微博： <a href=\"http://weibo.com/u/2640909603\" target=\"_blank\" rel=\"noopener\">http://weibo.com/u/2640909603</a><br>掘金：<a href=\"https://gold.xitu.io/user/571d953d39b0570068145cd1\" target=\"_blank\" rel=\"noopener\">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href=\"http://blog.csdn.net/violetjack0808\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/violetjack0808</a><br>简书： <a href=\"http://www.jianshu.com/users/54ae4af3a98d/latest_articles\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href=\"https://github.com/violetjack\" target=\"_blank\" rel=\"noopener\">https://github.com/violetjack</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>关于Vue源码学习的博客， <a href=\"http://hcysun.me/\" target=\"_blank\" rel=\"noopener\">HcySunYang</a>的<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>是我所见过讲的最清晰明了的博客了，非常适合想了解Vue源码的同学入手。本文是在看了这篇博客之后进一步的学习心得。<br>注意：本文所用Vue版本为 <code>2.5.13</code></p>\n</blockquote>\n<h1 id=\"关于源码学习\"><a href=\"#关于源码学习\" class=\"headerlink\" title=\"关于源码学习\"></a>关于源码学习</h1><p>关于学习源码，我有话要说~<br>一开始我学习Vue的源码，是将 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/vue.js\" target=\"_blank\" rel=\"noopener\">Vue.js</a> 这个文件下载下来逐行去看……因为我听信了我同事说的“不过一万多行代码，实现也很简单，可以直接看。”结果可想而知，花了十几个小时看完代码，还通过打断点看流程，除了学习到一些新的js语法、一些优雅的代码写法、和对整个代码熟悉了之外，没啥其他收获。<br>其实，这是一个丢西瓜捡芝麻的行为，没有明确的目的笼统的看源码，最终迷失在各种细枝末节上了。<br>所以呢，我看源码的经验教训有如下几点：</p>\n<ul>\n<li>看代码，必须带着问题去找实现代码。</li>\n<li>保持主线，不要纠结于细枝末节。永远记住你要解决什么问题。</li>\n<li>找到一篇优质的博客、向前辈学习，让前辈带着你去学习事半功倍。</li>\n<li>想看某编程语言的代码，必须要有扎实的语言基础。走路不稳就想跑，会摔得很惨~</li>\n<li>学习之道，不能盲目。应该找到一种快速有效的方法，来有目的的实现学习目标。不要用战术上的勤奋来掩盖战略上的失误。看代码如此、看书学习亦如此~</li>\n</ul>\n<h1 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h1><p>这里我们来解决从哪里开始看代码的流程，重点是<strong>找到Vue构造函数的实现</strong>。<br>首先，找到 <code>package.json</code> 文件，从中找到编译命令 <code>&quot;dev&quot;: &quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</code>，这里 <code>rollup</code> 是类似于 Webpack 的打包工具，打包文件在 <code>script/config.js</code> 中，找到该文件。找 <code>entry</code> 入口关键字（不会rollup，但配置方式和 Webpack 差不太多）。入口文件有好多配置，我们就找到会生成 <code>dist/vue.js</code> 的配置项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Runtime+compiler development build (Browser)</span><br><span class=\"line\">&apos;web-full-dev&apos;: &#123;</span><br><span class=\"line\">  entry: resolve(&apos;web/entry-runtime-with-compiler.js&apos;),</span><br><span class=\"line\">  dest: resolve(&apos;dist/vue.js&apos;),</span><br><span class=\"line\">  format: &apos;umd&apos;,</span><br><span class=\"line\">  env: &apos;development&apos;,</span><br><span class=\"line\">  alias: &#123; he: &apos;./entity-decoder&apos; &#125;,</span><br><span class=\"line\">  banner</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>好，这里就找到了 <code>web/entry-runtime-with-compiler.js</code> 这个路径，完整路径应该是 <code>src/platform/web/entry-runtime-with-compiler.js</code>。在这个文件中我们找到一个Vue对象import进来了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;./runtime/index&apos;</span><br></pre></td></tr></table></figure></p>\n<p>我们顺着找到到 <code>src/platform/web/runtime/index.js</code> 这个文件，在文件中发现导入文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;core/index&apos;</span><br></pre></td></tr></table></figure></p>\n<p>就顺着这个思路找，最终找到 <code>src/core/instance/index.js</code> 这个文件。<br>完整找到Vue实例入口文件的流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">script/config.js</span><br><span class=\"line\">src/platform/web/entry-runtime-with-compiler.js</span><br><span class=\"line\">src/platform/web/runtime/index.js</span><br><span class=\"line\">src/core/index.js</span><br><span class=\"line\">src/core/instance/index.js</span><br></pre></td></tr></table></figure></p>\n<p>简单看看Vue构造函数的样子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; initMixin &#125; from &apos;./init&apos;</span><br><span class=\"line\">import &#123; stateMixin &#125; from &apos;./state&apos;</span><br><span class=\"line\">import &#123; renderMixin &#125; from &apos;./render&apos;</span><br><span class=\"line\">import &#123; eventsMixin &#125; from &apos;./events&apos;</span><br><span class=\"line\">import &#123; lifecycleMixin &#125; from &apos;./lifecycle&apos;</span><br><span class=\"line\">import &#123; warn &#125; from &apos;../util/index&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">function Vue (options) &#123;</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">initMixin(Vue) // 初始化</span><br><span class=\"line\">stateMixin(Vue) // 状态混合</span><br><span class=\"line\">eventsMixin(Vue) // 事件混合</span><br><span class=\"line\">lifecycleMixin(Vue) // 生命周期混合</span><br><span class=\"line\">renderMixin(Vue) // 渲染混合</span><br><span class=\"line\"></span><br><span class=\"line\">export default Vue</span><br></pre></td></tr></table></figure></p>\n<p>可以看到Vue的构造函数，里面只做了 <code>this._init(options)</code> 行为。这个 <code>_init</code> 方法在执行 <code>initMixin</code> 方法的时候定义了。找到同目录下的 <code>init.js</code> 文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initMixin (Vue: Class&lt;Component&gt;) &#123;</span><br><span class=\"line\">  Vue.prototype._init = function (options?: Object) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    // a uid</span><br><span class=\"line\">    vm._uid = uid++</span><br><span class=\"line\"></span><br><span class=\"line\">    let startTag, endTag</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">      startTag = `vue-perf-start:$&#123;vm._uid&#125;`</span><br><span class=\"line\">      endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class=\"line\">      mark(startTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // a flag to avoid this being observed</span><br><span class=\"line\">    vm._isVue = true</span><br><span class=\"line\">    // merge options</span><br><span class=\"line\">    if (options &amp;&amp; options._isComponent) &#123;</span><br><span class=\"line\">      // optimize internal component instantiation</span><br><span class=\"line\">      // since dynamic options merging is pretty slow, and none of the</span><br><span class=\"line\">      // internal component options needs special treatment.</span><br><span class=\"line\">      initInternalComponent(vm, options)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 合并配置项</span><br><span class=\"line\">      vm.$options = mergeOptions(</span><br><span class=\"line\">        resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">        options || &#123;&#125;,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      initProxy(vm) // 初始化代理</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      vm._renderProxy = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vm._self = vm // 暴露对象自身</span><br><span class=\"line\">    initLifecycle(vm) // 初始化生命周期</span><br><span class=\"line\">    initEvents(vm) // 初始化事件：on,once,off,emit</span><br><span class=\"line\">    initRender(vm) // 初始化渲染：涉及到Virtual DOM</span><br><span class=\"line\">    callHook(vm, &apos;beforeCreate&apos;) //  触发 beforeCreate 生命周期钩子</span><br><span class=\"line\">    initInjections(vm) // 在初始化 data/props 前初始化Injections</span><br><span class=\"line\">    initState(vm) // 初始化状态选项</span><br><span class=\"line\">    initProvide(vm) // 在初始化 data/props 后初始化Provide</span><br><span class=\"line\">    // 有关inject和provide请查阅 https://cn.vuejs.org/v2/api/#provide-inject</span><br><span class=\"line\">    callHook(vm, &apos;created&apos;) // 触发 created 生命周期钩子</span><br><span class=\"line\"></span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">      vm._name = formatComponentName(vm, false)</span><br><span class=\"line\">      mark(endTag)</span><br><span class=\"line\">      measure(`vue $&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 如果Vue配置项中有el，直接挂在到DOM中</span><br><span class=\"line\">    if (vm.$options.el) &#123;</span><br><span class=\"line\">      vm.$mount(vm.$options.el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>抓住重点，<strong>我们是要来学习State的。</strong>从上面代码中可以找到initState方法的执行，这就是我们此行的目的——State数据选项。除此之外还有其他重要方法的初始化方式，这将会在之后的博客中继续讨论和学习。</p>\n<h1 id=\"学习State\"><a href=\"#学习State\" class=\"headerlink\" title=\"学习State\"></a>学习State</h1><p>之前是简单提一下学习源码的方法论和如何开始学习Vue源码学习。并且找到了我们要学习的State所在，现在进入正题：</p>\n<blockquote>\n<p>了解Vue的数据选项的运行机制。</p>\n</blockquote>\n<p>在<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>中，作者已经非常非常非常清晰明了的帮我们分析了data的实现。在此基础上开始好好学习其他数据选项的实现逻辑。</p>\n<h2 id=\"通过data理解mvvm\"><a href=\"#通过data理解mvvm\" class=\"headerlink\" title=\"通过data理解mvvm\"></a>通过data理解mvvm</h2><p>这里我通过自己的思路再来整理下项目中data的实现。<br><strong>注：</strong>由于这一部分已经被各类源码解析博客讲烂了，而要把这部分讲清楚要大量篇幅。所以我就不贴代码了。还是那句话，抓重点！我们主要研究的是data之外的实现方式。关于data的实现和mvvm的逐步实现，<a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" target=\"_blank\" rel=\"noopener\">Vue2.1.7源码学习</a>中讲的非常清晰明了。</p>\n<p><strong>以下是我整理的思路，有兴趣的同学可以顺着我的思路去看看。</strong></p>\n<p>在 state.js 中找到 initState，并顺利找到 initData 函数。initData中主要做了以下几步操作：</p>\n<ol>\n<li>获取data数据，data数据通常是一个方法，执行方法返回data数据。所以说我们要将data写成函数方法的形式。</li>\n<li>遍历data数据，判断是否有data与props的key同名，如果没有执行proxy方法，该方法用于将data中的数据同步到vm对象上，所以我们可以通过 <code>vm.name</code> 来修改和获取 data 中的 name 的值。</li>\n<li>执行observe方法，监听data的变化。</li>\n</ol>\n<p>重点在 <code>observe</code> 方法，于是我们根据 import 关系找到 <code>src/core/observer/index.js</code> 文件。<code>observe</code> 方法通过传入的值最终返回一个Observer类的实例对象。<br>找到Observer类，在构造函数中为当前类创建Dep实例，然后判断数据，如果是数组，触发 observeArray 方法，遍历执行 observe 方法；如果是对象，触发walk方法。<br>找到walk方法，方法中遍历了数据对象，为对象每个属性执行 defineReactive 方法。<br><strong>找到 defineReactive 方法，该方法为 mvvm 数据变化检测的核心。</strong>为对象属性添加 set 和 get 方法。重点来了， vue 在 get 方法中执行 <code>dep.depend()</code> 方法，在 set 方法中执行 <code>dep.notify()</code> 方法。这个先不多讲，最后进行联结说明。<br>找到同目录下的 <code>dep.js</code> 文件，文件不长。定义了 Dep 类和<code>pushTarget</code>、<code>popTarget</code> 方法。在 Dep 类中有我们之前提到的 <code>depend</code> 和 <code>notify</code> 方法。看下两个方法的实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  if (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">notify () &#123;</span><br><span class=\"line\">  // stabilize the subscriber list first</span><br><span class=\"line\">  const subs = this.subs.slice()</span><br><span class=\"line\">  for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>depend</code> 方法中，Dep.target 就是一个 Watcher 实例，它的 <code>addDep</code> 方法最终会调用到 Dep 的 <code>addSubs</code> 方法。subs 是 Watcher 数组。即将当前 watcher 存到 Dep 的 subs 数组中。<br>在 <code>notify</code> 方法中，将 Watcher 数组 subs 遍历，执行他们的 <code>update</code> 方法。<code>update</code> 最终会去执行 <code>watcher</code> 的回调函数。<br>即在 get 方法中将 watcher 添加到 dep，在 set 方法中通过 dep 对 watcher 进行回调函数触发。<br>这里其实已经实现了数据监听，接着我们来看看 Watcher，其实 Watcher 就是Vue中 watch 选项的实现了。说到 watch 选项我们都知道它用来监听数据变化。Watcher 就是实现这个过程的玩意啦~<br>Watcher的构造函数最终调用了 <code>get</code> 方法，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get () &#123;</span><br><span class=\"line\">   pushTarget(this)</span><br><span class=\"line\">   let value</span><br><span class=\"line\">   const vm = this.vm</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">     value = this.getter.call(vm, vm)</span><br><span class=\"line\">   &#125; catch (e) &#123;</span><br><span class=\"line\">     if (this.user) &#123;</span><br><span class=\"line\">       handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">       throw e</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; finally &#123;</span><br><span class=\"line\">     // &quot;touch&quot; every property so they are all tracked as</span><br><span class=\"line\">     // dependencies for deep watching</span><br><span class=\"line\">     if (this.deep) &#123;</span><br><span class=\"line\">       traverse(value)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     popTarget()</span><br><span class=\"line\">     this.cleanupDeps()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return value</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>get</code> 方法做了如下几步：</p>\n<ol>\n<li>将当前 Watcher 实例传递给 Dep 的 Dep.target。</li>\n<li>执行 Watcher 所监测的数据的 <code>getter</code> 方法。</li>\n<li>最终，将 <code>Dep.target</code> 恢复到上一个值，并且将当前 Watcher 从 Dep 的 subs 中去除。</li>\n</ol>\n<p>其中要注意的是，在第二步中数据的 <code>getter</code> 方法会执行到 <code>dep.depend()</code> 方法，<code>depend</code> 方法将当前 watcher 加入到 subs 中。至于步骤一和三还不太理解。挖个坑先~<br>这样 watcher 就监测上数据了。那怎么使用呢？当然是数据变化时使用咯。当监测的数据变化时，执行数据 setter 方法，然后执行 dep 的 <code>notify</code> 方法。由于我们之前已经将 watcher 都收集到 dep 的 subs 中，<code>notify</code> 方法遍历执行 watcher 的 <code>update</code> 方法，<code>update</code> 方法最终遍历执行回调函数。</p>\n<ol>\n<li>执行 <code>observe</code> 方法，创建 Observer 执行 <code>walk</code> 为对象数据添加setter 和 getter</li>\n<li>在添加 setter 和 getter 时，创建 Dep，在 getter 方法中执行 <code>dep.depend()</code> 收集 watcher，在 setter 方法中执行 <code>dep.notify()</code> 方法，最终遍历执行 watcher 数组的回调函数。</li>\n<li>Dep 类似于 Watcher 和 Observer 的中间件。</li>\n<li>Watcher 用于监听变化，并执行回调函数。</li>\n<li>当 Watcher 实例创建时，Watcher 实例会将自身传递给 Dep.target</li>\n<li>Watcher 调用监测数据的 <code>getter</code>方法触发 <code>dep.depend()</code></li>\n<li><code>dep.depend()</code>方法将当前 Watcher（Dep.target）传递给Dep的subs（watcher数组）中。</li>\n<li>当被监测的数据内容发生改变时，执行 <code>setter</code> 方法，触发 <code>dep.notify()</code> 方法，遍历 Dep 中的 subs（watcher数组），执行 Watcher 的回调函数。</li>\n</ol>\n<p>嗯……就是这样~之后把挖的坑填上！</p>\n<h2 id=\"watch实现\"><a href=\"#watch实现\" class=\"headerlink\" title=\"watch实现\"></a>watch实现</h2><p>说完了 Data 的监听流程，说说 watch 应该就不难啦~<br>找到 <code>src/core/instance/state.js</code> 的 <code>initWatch</code> 函数，该方法用来遍历 Vue 实例中的 watch 项，最终所有 watch 都会执行 <code>createWatcher</code> 方法。<br>继续看 <code>createWatcher</code> 方法，这个方法也很简单，最终返回 <code>vm.$watch(keyOrFn, handler, options)</code>。我们继续往下找~<br>在 <code>stateMixin</code> 方法中找到了定义 Vue 的 $watch 方法属性。来看看怎么实现的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$watch = function (</span><br><span class=\"line\">  expOrFn: string | Function,</span><br><span class=\"line\">  cb: any,</span><br><span class=\"line\">  options?: Object</span><br><span class=\"line\">): Function &#123;</span><br><span class=\"line\">  const vm: Component = this</span><br><span class=\"line\">  if (isPlainObject(cb)) &#123;</span><br><span class=\"line\">    return createWatcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\">  options.user = true</span><br><span class=\"line\">  const watcher = new Watcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">  if (options.immediate) &#123;</span><br><span class=\"line\">    cb.call(vm, watcher.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function unwatchFn () &#123;</span><br><span class=\"line\">    watcher.teardown()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果回调函数 cb 是一个对象，那么返回并执行 <code>createWatcher</code> 函数，最终还是会走到 $watch 方法中。<br>否则，创建一个 Watcher 实例，当这个实例创建后，目标数据有任何变化 watch 选项中都能监听到了。如果是有 immediate 参数，那么立即执行一次Watcher的回调函数。最后返回一个解除监听的方法，执行了 Watcher 的 teardown 方法。<br>那么问题来了，为什么watch选项监听数据的方法中参数是如下写法呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  a: function(val, oldVal)&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以找到 <code>src/core/instance/observer/watcher.js</code> 中找到 <code>run</code> 方法。可以看到 <code>this.cb.call(this.vm, value, oldValue)</code> 这里的 cb 回调函数传递的参数就是 value 和 oldValue。<br>这里说个基础知识，函数使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"> call 方法</a>执行，第一个参数是方法的this值，之后才是真正的参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run () &#123;</span><br><span class=\"line\">    if (this.active) &#123;</span><br><span class=\"line\">      const value = this.get()</span><br><span class=\"line\">      if (</span><br><span class=\"line\">        value !== this.value ||</span><br><span class=\"line\">        // Deep watchers and watchers on Object/Arrays should fire even</span><br><span class=\"line\">        // when the value is the same, because the value may</span><br><span class=\"line\">        // have mutated.</span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        this.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        // set new value</span><br><span class=\"line\">        const oldValue = this.value</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\">        if (this.user) &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            this.cb.call(this.vm, value, oldValue)</span><br><span class=\"line\">          &#125; catch (e) &#123;</span><br><span class=\"line\">            handleError(e, this.vm, `callback for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.cb.call(this.vm, value, oldValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>小结：watch 选项其实就是为指定数据创建 Watcher 实例，接收回调函数的过程。</strong></p>\n<h2 id=\"props实现\"><a href=\"#props实现\" class=\"headerlink\" title=\"props实现\"></a>props实现</h2><p>接下来我们看看props，官网对props的定义如下：</p>\n<blockquote>\n<p>props 可以是数组或对象，用于接收来自父组件的数据。</p>\n</blockquote>\n<p>找到 <code>initProps</code> 方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initProps (vm: Component, propsOptions: Object) &#123;</span><br><span class=\"line\">  const propsData = vm.$options.propsData || &#123;&#125;</span><br><span class=\"line\">  const props = vm._props = &#123;&#125;</span><br><span class=\"line\">  // cache prop keys so that future props updates can iterate using Array</span><br><span class=\"line\">  // instead of dynamic object key enumeration.</span><br><span class=\"line\">  const keys = vm.$options._propKeys = []</span><br><span class=\"line\">  const isRoot = !vm.$parent</span><br><span class=\"line\">  // root instance props should be converted</span><br><span class=\"line\">  observerState.shouldConvert = isRoot</span><br><span class=\"line\">  for (const key in propsOptions) &#123;</span><br><span class=\"line\">    keys.push(key)</span><br><span class=\"line\">    const value = validateProp(key, propsOptions, propsData, vm)</span><br><span class=\"line\">    /* istanbul ignore else */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      const hyphenatedKey = hyphenate(key)</span><br><span class=\"line\">      if (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `&quot;$&#123;hyphenatedKey&#125;&quot; is a reserved attribute and cannot be used as component prop.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class=\"line\">        if (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            `Avoid mutating a prop directly since the value will be ` +</span><br><span class=\"line\">            `overwritten whenever the parent component re-renders. ` +</span><br><span class=\"line\">            `Instead, use a data or computed property based on the prop&apos;s ` +</span><br><span class=\"line\">            `value. Prop being mutated: &quot;$&#123;key&#125;&quot;`,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      defineReactive(props, key, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!(key in vm)) &#123;</span><br><span class=\"line\">      proxy(vm, `_props`, key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  observerState.shouldConvert = true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，props 和 data 类似。在 <code>initProps</code> 中无非做了两步：<code>defineReactive</code> 和 <code>proxy</code>，这两个方法我们在提到 data 的时候讲过了。<code>defineReactive</code> 为数据设置 setter、getter，<code>proxy</code> 方法将 <code>props</code> 中的属性映射到 Vue 实例 vm 上，便于我们可以用 <code>vm.myProps</code> 来获取数据。<br>至此，我有个疑问：data与props有何不同呢？<br>data使用的是observe方法，创建一个Observer对象，Observer对象最终是执行了defineReactive方法。而props是遍历选项属性，执行defineReactive方法。中间可能就多了个Observer对象，那么这个Observer对象的作用到底在哪呢？经过实践props属性改变后界面也会改变。说明mvvm对props也是成立的。<br>另外，data和props有个不同的地方就是props是不建议改变的。详见<a href=\"https://cn.vuejs.org/v2/guide/components.html#单向数据流\" target=\"_blank\" rel=\"noopener\">单向数据流</a><br>小结：逻辑和data类似，都是监听数据。不同之处呢……再研究研究~</p>\n<h2 id=\"computed实现\"><a href=\"#computed实现\" class=\"headerlink\" title=\"computed实现\"></a>computed实现</h2><p>再来说说computed，找到初始化computed方法 <code>src/core/instance/state.js</code> 中的 <code>initComputed</code> 方法，去除非关键代码后看到其实主要有俩个行为，为 computed 属性创建 Watcher，然后执行 <code>defineComputed</code>方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initComputed (vm: Component, computed: Object) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  for (const key in computed) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    if (!isSSR) &#123;</span><br><span class=\"line\">      watchers[key] = new Watcher(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!(key in vm)) &#123;</span><br><span class=\"line\">      defineComputed(vm, key, userDef)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>defineComputed 做了两步行为：一是定义 sharedPropertyDefinition 的 getter 和 setter，二是将 sharedPropertyDefinition 的属性传给vm，即 <code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>。自此，我们可以通过 <code>vm.computedValue</code> 来获取计算属性结果了。<br><strong>小结：computed其实也就是一个数据监听行为，与data和props不同之处就是在get函数中需要进行逻辑计算处理。</strong></p>\n<h2 id=\"methods实现\"><a href=\"#methods实现\" class=\"headerlink\" title=\"methods实现\"></a>methods实现</h2><p>继续在 <code>state.js</code> 中看到 <code>initMethods</code> 方法。顾名思义，这是初始化methods的方法。实现很简单，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initMethods (vm: Component, methods: Object) &#123;</span><br><span class=\"line\">  const props = vm.$options.props</span><br><span class=\"line\">  for (const key in methods) &#123;</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">      if (methods[key] == null) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; has an undefined value in the component definition. ` +</span><br><span class=\"line\">          `Did you reference the function correctly?`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; has already been defined as a prop.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if ((key in vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Method &quot;$&#123;key&#125;&quot; conflicts with an existing Vue instance method. ` +</span><br><span class=\"line\">          `Avoid defining component methods that start with _ or $.`</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重点在最后一句。前面都排除重名和空值错误的，最后将 methods 中的方法传给 vm，方法内容如果为空则方法什么都不做。否则调用 <code>bind</code> 方法执行该函数。<br>找到这个 <code>bind</code> 方法，位置在 <code>src/shared/util.js</code> 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function bind (fn: Function, ctx: Object): Function &#123;</span><br><span class=\"line\">  function boundFn (a) &#123;</span><br><span class=\"line\">    const l: number = arguments.length</span><br><span class=\"line\">    return l</span><br><span class=\"line\">      ? l &gt; 1</span><br><span class=\"line\">        ? fn.apply(ctx, arguments)</span><br><span class=\"line\">        : fn.call(ctx, a)</span><br><span class=\"line\">      : fn.call(ctx)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // record original fn length</span><br><span class=\"line\">  boundFn._length = fn.length</span><br><span class=\"line\">  return boundFn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该方法返回一个执行 <code>methods</code> 中函数的方法（这种方法的执行方式比较快）。<br><strong>小结：将methods的方法用bind函数优化执行过程。然后将methods中的各个方法传给Vue实例对象。</strong></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>本文纯属个人理解，如有任何问题，请及时指出，不胜感激~<br>最后提出一个看源码的小心得：</p>\n<blockquote>\n<p>我发现……看源码、跟流程，尽量将注意力集中在<strong>方法的执行</strong>和<strong>类的实例化</strong>行为上。对于变量的获取和赋值、测试环境警报提示，简略看下就行，避免逐行阅读代码拉低效率。</p>\n</blockquote>\n<p>至此，Vue中的几个数据选项都学习了一遍了。关键在于理解mvvm的过程。data 理解之后，props、watch、computed 都好理解了。methods 和 mvvm 无关……<br>通过四个早上的时间把文章写出来了~对 Vue 的理解深刻了一些，但是还是能感觉到有很多未知的知识点等着我去发掘。加油吧！今年专注于 Vue 前端学习，把 Vue 给弄懂！</p>\n<h1 id=\"Vue-js学习系列\"><a href=\"#Vue-js学习系列\" class=\"headerlink\" title=\"Vue.js学习系列\"></a>Vue.js学习系列</h1><p>鉴于前端知识碎片化严重，我希望能够系统化的整理出一套关于Vue的学习系列博客。</p>\n<p><a href=\"http://www.jianshu.com/p/8013d8d37bd0\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列一 —— vue-router2学习实践笔记（附DEMO）</a><br><a href=\"http://www.jianshu.com/p/d6f7e11f18af\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列二 —— vuex学习实践笔记（附DEMO）</a><br><a href=\"http://www.jianshu.com/p/8e5fb763c3d7\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列三 —— axios和网络传输相关知识的学习实践</a><br><a href=\"http://www.jianshu.com/p/aef34acd111f\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列四 —— Webpack打包工具的使用</a><br><a href=\"http://www.jianshu.com/p/efb6fbed6fac\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列五 —— 从VUE-CLI来聊聊ESLint</a><br><a href=\"http://www.jianshu.com/p/073d25a3bba0\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列六 —— Vue单元测试Karma+Mocha学习笔记</a><br><a href=\"https://www.jianshu.com/p/ba7466d7101a\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列七 —— Vue服务器渲染Nuxt学习</a><br><a href=\"https://www.jianshu.com/p/15028f91226e\" target=\"_blank\" rel=\"noopener\">Vue.js学习系列八 —— Vue源码学习之State学习</a></p>\n<h1 id=\"Vue-js学习系列项目地址\"><a href=\"#Vue-js学习系列项目地址\" class=\"headerlink\" title=\"Vue.js学习系列项目地址\"></a>Vue.js学习系列项目地址</h1><p>本文源码已收入到GitHub中，以供参考，当然能留下一个star更好啦^-^。<br><a href=\"https://github.com/violetjack/VueStudyDemos\" target=\"_blank\" rel=\"noopener\">https://github.com/violetjack/VueStudyDemos</a></p>\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><p>VioletJack，高效学习前端工程师，喜欢研究提高效率的方法，也专注于Vue前端相关知识的学习、整理。<br>欢迎关注、点赞、评论留言~我将持续产出Vue相关优质内容。</p>\n<p>新浪微博： <a href=\"http://weibo.com/u/2640909603\" target=\"_blank\" rel=\"noopener\">http://weibo.com/u/2640909603</a><br>掘金：<a href=\"https://gold.xitu.io/user/571d953d39b0570068145cd1\" target=\"_blank\" rel=\"noopener\">https://gold.xitu.io/user/571d953d39b0570068145cd1</a><br>CSDN: <a href=\"http://blog.csdn.net/violetjack0808\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/violetjack0808</a><br>简书： <a href=\"http://www.jianshu.com/users/54ae4af3a98d/latest_articles\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/users/54ae4af3a98d/latest_articles</a><br>Github： <a href=\"https://github.com/violetjack\" target=\"_blank\" rel=\"noopener\">https://github.com/violetjack</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}